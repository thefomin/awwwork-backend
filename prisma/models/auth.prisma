model User {
  id String @id @default(uuid())
  username String @unique
  email    String @unique
  password String
  displayName String? @map("display_name")
  avatar String?

  role UserRole @default(DEFAULT)

  emailVerification EmailVerification?
  externalAccounts ExternalAccount[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum UserRole {
  DEFAULT
  ADMIN

  @@map("user_roles")
}

model EmailVerification {
  id String @id @default(uuid())

  token  String    @unique
  expiry DateTime?

  status EmailVerificationStatus @default(PENDING)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("email_verification")
}

enum EmailVerificationStatus {
  PENDING
  VERIFIED

  @@map("email_verification_statuses")
}

model ExternalAccount {
  id String @id @default(uuid())

  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiry       Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, provider])
  @@map("external_accounts")
}

enum AccountProvider {
  GOOGLE
  GITHUB
  YANDEX

  @@map("account_providers")
}
